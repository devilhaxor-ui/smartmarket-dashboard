import streamlit as st
import feedparser
from datetime import datetime, timedelta
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from deep_translator import GoogleTranslator
from bs4 import BeautifulSoup
import pytz
import yfinance as yf
import pandas as pd
import json
import time
import requests
from threading import Thread
import sqlite3
import os

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
thai_tz = pytz.timezone('Asia/Bangkok')

# ---------- INITIAL SETUP ----------
def init_database():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô database ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    conn = sqlite3.connect('market_data.db')
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS market_analysis
                 (id INTEGER PRIMARY KEY, date TEXT, asset TEXT, 
                  sentiment REAL, article_count INTEGER, trend TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS price_data
                 (id INTEGER PRIMARY KEY, symbol TEXT, price REAL, 
                  change_percent REAL, timestamp TEXT)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS important_news
                 (id INTEGER PRIMARY KEY, date TEXT, category TEXT,
                  title TEXT, link TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    conn.commit()
    conn.close()

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ database
init_database()

def clean_html(raw_html):
    if not raw_html:
        return ""
    soup = BeautifulSoup(raw_html, "html.parser")
    return soup.get_text()

# ---------- CONFIG ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ----------
RSS_FEEDS = [
    "https://news.google.com/rss/search?q=gold+price+OR+XAUUSD&hl=en-US&gl=US&ceid=US:en",
    "https://news.google.com/rss/search?q=silver+price+OR+XAGUSD&hl=en-US&gl=US&ceid=US:en",
    "https://news.google.com/rss/search?q=bitcoin+OR+BTCUSD&hl=en-US&gl=US&ceid=US:en"
]

GOLD_KEYWORDS = ['gold', 'xau', 'bullion', 'precious metal', 'fed', 'inflation', 'dollar', 'usd', '‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥', 'xauusd']

ASSETS = {
    "‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥ (XAU)": GOLD_KEYWORDS,
    "‡πÄ‡∏á‡∏¥‡∏ô (XAG)": ["silver", "xagusd"],
    "‡∏ö‡∏¥‡∏ï‡∏Ñ‡∏≠‡∏¢‡∏ô‡πå (BTC)": ["bitcoin", "btc", "crypto"]
}

SYMBOLS = {
    "‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥ (XAU)": "GC=F",
    "‡πÄ‡∏á‡∏¥‡∏ô (XAG)": "SI=F", 
    "‡∏ö‡∏¥‡∏ï‡∏Ñ‡∏≠‡∏¢‡∏ô‡πå (BTC)": "BTC-USD",
    "‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå": "DX=F"
}

analyzer = SentimentIntensityAnalyzer()

# ---------- 1. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå ----------
@st.cache_data(ttl=300)  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
def get_live_prices():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå"""
    prices = {}
    for name, symbol in SYMBOLS.items():
        try:
            ticker = yf.Ticker(symbol)
            data = ticker.history(period="2d")
            if len(data) >= 2:
                current_price = data['Close'][-1]
                prev_price = data['Close'][-2]
                change = ((current_price - prev_price) / prev_price) * 100
                prices[name] = {
                    'price': current_price,
                    'change': change,
                    'symbol': symbol
                }
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á database
                save_price_data(name, symbol, current_price, change)
                
        except Exception as e:
            st.error(f"Error fetching price for {name}: {str(e)}")
            continue
    
    return prices

def save_price_data(asset, symbol, price, change):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏á database"""
    conn = sqlite3.connect('market_data.db')
    c = conn.cursor()
    c.execute('''INSERT INTO price_data (symbol, price, change_percent, timestamp)
                 VALUES (?, ?, ?, ?)''', 
              (symbol, price, change, datetime.now(thai_tz).isoformat()))
    conn.commit()
    conn.close()

# ---------- 2. ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ----------
def check_important_news(articles):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏ï‡∏•‡∏≤‡∏î"""
    important_keywords = {
        "Fed": ["fed", "federal reserve", "jerome powell", "interest rate", "fomc"],
        "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ü‡πâ‡∏≠": ["inflation", "cpi", "ppi", "consumer price", "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ü‡πâ‡∏≠"],
        "‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô": ["employment", "jobs report", "nfp", "unemployment", "nonfarm"],
        "‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡∏Å‡∏≤‡∏£‡∏ì‡πå": ["crisis", "recession", "war", "conflict", "geopolitical"],
        "‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô": ["monetary policy", "quantitative easing", "tapering", "qe"]
    }
    
    alerts = []
    for category, keywords in important_keywords.items():
        for article in articles[:15]:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 15 ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            content = (article['title'] + " " + article['summary_en']).lower()
            if any(keyword in content for keyword in keywords):
                alerts.append({
                    'category': category,
                    'title': article['title'],
                    'link': article['link'],
                    'summary': article['summary_en'][:200] + "..."
                })
                break
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏•‡∏á database
    save_important_news(alerts)
    
    return alerts

def save_important_news(alerts):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏•‡∏á database"""
    conn = sqlite3.connect('market_data.db')
    c = conn.cursor()
    today = datetime.now(thai_tz).strftime("%Y-%m-%d")
    
    for alert in alerts:
        c.execute('''INSERT INTO important_news (date, category, title, link)
                     VALUES (?, ?, ?, ?)''', 
                  (today, alert['category'], alert['title'], alert['link']))
    
    conn.commit()
    conn.close()

# ---------- 3. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö sentiment ----------
def get_technical_analysis(symbol):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö sentiment"""
    try:
        ticker = yf.Ticker(symbol)
        data = ticker.history(period="2mo")
        
        if len(data) < 20:
            return None
            
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        data['MA20'] = data['Close'].rolling(20).mean()
        data['MA50'] = data['Close'].rolling(50).mean()
        
        current_price = data['Close'][-1]
        ma20 = data['MA20'][-1]
        ma50 = data['MA50'][-1]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì RSI
        delta = data['Close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        current_rsi = rsi[-1]
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
        if current_price > ma20 > ma50:
            trend = "Uptrend ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á"
            trend_color = "üü¢"
        elif current_price > ma20 and ma20 < ma50:
            trend = "Uptrend ‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏≠"
            trend_color = "üü°"
        elif current_price < ma20 < ma50:
            trend = "Downtrend ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á" 
            trend_color = "üî¥"
        else:
            trend = "Downtrend ‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏≠"
            trend_color = "üü†"
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå RSI
        if current_rsi > 70:
            rsi_signal = " overbought"
            rsi_color = "üî¥"
        elif current_rsi < 30:
            rsi_signal = " oversold"
            rsi_color = "üü¢"
        else:
            rsi_signal = " neutral"
            rsi_color = "üü°"
            
        return {
            'current_price': current_price,
            'trend': trend,
            'trend_color': trend_color,
            'ma20': ma20,
            'ma50': ma50,
            'rsi': current_rsi,
            'rsi_signal': rsi_signal,
            'rsi_color': rsi_color,
            'support': data['Close'].tail(20).min(),
            'resistance': data['Close'].tail(20).max()
        }
    except Exception as e:
        st.error(f"Technical analysis error: {str(e)}")
        return None

# ---------- 4. ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏• ----------
def save_daily_analysis(results):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•"""
    today = datetime.now(thai_tz).strftime("%Y-%m-%d")
    
    conn = sqlite3.connect('market_data.db')
    c = conn.cursor()
    
    for asset_name, data in results.items():
        c.execute('''INSERT INTO market_analysis (date, asset, sentiment, article_count, trend)
                     VALUES (?, ?, ?, ?, ?)''', 
                  (today, asset_name, data['sentiment'], data['article_count'], data['trend']))
    
    conn.commit()
    conn.close()

def get_analysis_history():
    """‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
    conn = sqlite3.connect('market_data.db')
    c = conn.cursor()
    
    c.execute('''SELECT date, asset, sentiment, article_count, trend 
                 FROM market_analysis 
                 ORDER BY date DESC, asset LIMIT 100''')
    
    rows = c.fetchall()
    conn.close()
    
    return pd.DataFrame(rows, columns=['date', 'asset', 'sentiment', 'article_count', 'trend'])

# ---------- 5. ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î ----------
def generate_trading_strategies(results, technical_data, live_prices):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î"""
    strategies = []
    
    for asset_name, data in results.items():
        sentiment = data['sentiment']
        article_count = data['article_count']
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
        if article_count < 3:
            confidence = "‡∏ï‡πà‡∏≥"
            confidence_color = "üî¥"
        elif article_count < 6:
            confidence = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
            confidence_color = "üü°"
        else:
            confidence = "‡∏™‡∏π‡∏á"
            confidence_color = "üü¢"
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
        tech = technical_data.get(asset_name, {})
        current_trend = tech.get('trend', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö')
        rsi_signal = tech.get('rsi_signal', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ï‡∏≤‡∏° sentiment ‡πÅ‡∏•‡∏∞ technical
        if sentiment > 0.15 and "Uptrend" in current_trend:
            strategy = {
                'asset': asset_name,
                'action': "üü¢ ‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
                'confidence': f"{confidence_color} {confidence}",
                'reason': "‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á + ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å",
                'risk': "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
                'timeframe': "1-3 ‡∏ß‡∏±‡∏ô",
                'target': "0.8-1.2%",
                'stoploss': "0.4%"
            }
        elif sentiment > 0.15 and "Downtrend" in current_trend:
            strategy = {
                'asset': asset_name,
                'action': "üü° ‡∏£‡∏≠ pullback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡∏∑‡πâ‡∏≠",
                'confidence': f"{confidence_color} {confidence}",
                'reason': "‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å‡πÅ‡∏ï‡πà‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö",
                'risk': "‡∏™‡∏π‡∏á",
                'timeframe': "2-5 ‡∏ß‡∏±‡∏ô", 
                'target': "1-1.5%",
                'stoploss': "0.6%"
            }
        elif sentiment > 0 and "Uptrend" in current_trend:
            strategy = {
                'asset': asset_name,
                'action': "üü¢ ‡∏ã‡∏∑‡πâ‡∏≠‡∏ö‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏Å‡∏ï‡∏±‡∏ß",
                'confidence': f"{confidence_color} {confidence}",
                'reason': "‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ + ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å",
                'risk': "‡∏ï‡πà‡∏≥‡∏ñ‡∏∂‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
                'timeframe': "1-2 ‡∏ß‡∏±‡∏ô",
                'target': "0.5-0.8%",
                'stoploss': "0.3%"
            }
        elif sentiment < -0.15 and "Downtrend" in current_trend:
            strategy = {
                'asset': asset_name,
                'action': "üî¥ ‡∏Ç‡∏≤‡∏¢/Short",
                'confidence': f"{confidence_color} {confidence}",
                'reason': "‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏ö‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á + ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö",
                'risk': "‡∏™‡∏π‡∏á",
                'timeframe': "2-5 ‡∏ß‡∏±‡∏ô",
                'target': "1-2%",
                'stoploss': "0.8%"
            }
        else:
            strategy = {
                'asset': asset_name,
                'action': "‚ö™ ‡∏£‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô",
                'confidence': f"{confidence_color} {confidence}",
                'reason': "‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Å‡∏±‡∏ô",
                'risk': "‡∏ï‡πà‡∏≥",
                'timeframe': "‡∏£‡∏≠ confirmation",
                'target': "-",
                'stoploss': "-"
            }
        
        strategies.append(strategy)
    
    return strategies

# ---------- 7. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ----------
def get_economic_calendar():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"""
    today = datetime.now(thai_tz)
    
    economic_events = [
        {
            'event': 'Fed Meeting',
            'date': (today + timedelta(days=2)).strftime('%d/%m'),
            'impact': '‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å',
            'effect_on_gold': '‡πÅ‡∏Ç‡πá‡∏á‡∏ï‡∏±‡∏ß‡∏´‡∏≤‡∏Å‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô',
            'time': '02:00 ‡∏ô. (‡πÑ‡∏ó‡∏¢)'
        },
        {
            'event': 'CPI Data', 
            'date': (today + timedelta(days=5)).strftime('%d/%m'),
            'impact': '‡∏™‡∏π‡∏á',
            'effect_on_gold': '‡πÅ‡∏Ç‡πá‡∏á‡∏ï‡∏±‡∏ß‡∏´‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ü‡πâ‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏≤‡∏î',
            'time': '19:30 ‡∏ô. (‡πÑ‡∏ó‡∏¢)'
        },
        {
            'event': 'NFP Report',
            'date': (today + timedelta(days=7)).strftime('%d/%m'), 
            'impact': '‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å',
            'effect_on_gold': '‡∏≠‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏≤‡∏Å‡∏à‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏≤‡∏î',
            'time': '19:30 ‡∏ô. (‡πÑ‡∏ó‡∏¢)'
        },
        {
            'event': 'Retail Sales',
            'date': (today + timedelta(days=3)).strftime('%d/%m'),
            'impact': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
            'effect_on_gold': '‡πÅ‡∏Ç‡πá‡∏á‡∏ï‡∏±‡∏ß‡∏´‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏≤‡∏î',
            'time': '19:30 ‡∏ô. (‡πÑ‡∏ó‡∏¢)'
        }
    ]
    
    return economic_events

# ---------- 8. Dashboard ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ----------
def get_performance_stats():
    """‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"""
    try:
        df = get_analysis_history()
        
        if len(df) < 2:
            return None
            
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ñ‡∏£‡πà‡∏≤‡∏ß‡πÜ
        accuracy_data = []
        assets = df['asset'].unique()
        
        for asset in assets:
            asset_df = df[df['asset'] == asset].sort_values('date')
            if len(asset_df) < 2:
                continue
                
            correct_predictions = 0
            total_predictions = len(asset_df) - 1
            
            for i in range(1, len(asset_df)):
                current_sentiment = asset_df.iloc[i]['sentiment']
                prev_sentiment = asset_df.iloc[i-1]['sentiment']
                
                # ‡∏ñ‡πâ‡∏≤ sentiment ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                if (current_sentiment > 0 and prev_sentiment > 0) or (current_sentiment < 0 and prev_sentiment < 0):
                    correct_predictions += 1
            
            accuracy = (correct_predictions / total_predictions) * 100 if total_predictions > 0 else 0
            
            accuracy_data.append({
                'asset': asset,
                'accuracy': accuracy,
                'total_days': len(asset_df),
                'avg_sentiment': asset_df['sentiment'].mean()
            })
        
        return accuracy_data
    except Exception as e:
        st.error(f"Performance calculation error: {str(e)}")
        return None

# ---------- 11. Background Updates ----------
class NewsUpdater:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á"""
    def __init__(self):
        self.last_update = None
        self.is_running = False
        
    def start_background_update(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á"""
        if not self.is_running:
            self.is_running = True
            # ‡πÉ‡∏ô Streamlit Cloud ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏ó‡∏ô threading
            st.success("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
    
    def check_for_updates(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        if not self.last_update:
            return True
            
        time_diff = datetime.now() - self.last_update
        return time_diff.total_seconds() > 3600  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

# ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏° ----------
@st.cache_data(ttl=3600, show_spinner=False)
def get_news():
    articles = []
    for url in RSS_FEEDS:
        try:
            feed = feedparser.parse(url)
            for entry in feed.entries[:10]:
                summary_text = clean_html(entry.get("summary", ""))
                
                articles.append({
                    "title": entry.title,
                    "link": entry.link,
                    "summary_en": summary_text,
                    "published": entry.get("published", ""),
                    "content_lower": (entry.title + " " + summary_text).lower()
                })
        except Exception as e:
            st.error(f"Error fetching feed {url}: {str(e)}")
    
    return articles

@st.cache_data(ttl=3600)
def translate_text(text):
    if not text or len(text.strip()) == 0:
        return text
    try:
        text_limited = text[:500] + "..." if len(text) > 500 else text
        return GoogleTranslator(source='auto', target='th').translate(text_limited)
    except Exception:
        return text

def analyze_gold_news(articles):
    gold_articles = []
    for article in articles:
        if any(keyword in article['content_lower'] for keyword in GOLD_KEYWORDS):
            gold_articles.append(article)
    
    if not gold_articles:
        return None
    
    sentiment_scores = []
    for article in gold_articles:
        vs = analyzer.polarity_scores(article['title'] + " " + article['summary_en'])
        sentiment_scores.append(vs['compound'])
    
    avg_sentiment = sum(sentiment_scores) / len(sentiment_scores) if sentiment_scores else 0
    
    return {
        'articles': gold_articles,
        'sentiment': avg_sentiment,
        'article_count': len(gold_articles)
    }

def generate_gold_daily_summary(gold_data):
    if not gold_data:
        return None
    
    articles = gold_data['articles'][:5]
    avg_sentiment = gold_data['sentiment']
    
    summaries_th = []
    for i, article in enumerate(articles, 1):
        try:
            title_th = translate_text(article['title'])
            summary_short = article['summary_en'][:150] + "..." if len(article['summary_en']) > 150 else article['summary_en']
            summary_th = translate_text(summary_short)
            
            summaries_th.append(f"{i}. **{title_th}**\n   üìù {summary_th}")
        except:
            summaries_th.append(f"{i}. **{article['title']}**\n   üìù {article['summary_en'][:100]}...")
    
    if avg_sentiment > 0.15:
        trend = "üü¢ **‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ö‡∏ß‡∏Å**"
        outlook = "‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å"
    elif avg_sentiment > -0.1:
        trend = "üü° **‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏•‡∏≤‡∏á**"
        outlook = "‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö ‡πÅ‡∏£‡∏á‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"
    else:
        trend = "üî¥ **‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏•‡∏ö**"
        outlook = "‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏°‡∏µ‡πÅ‡∏£‡∏á‡∏Å‡∏î‡∏î‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏ö"
    
    summary_report = f"""
# üèÜ Gold Daily Summary
*‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {datetime.now(thai_tz).strftime('%d/%m/%Y %H:%M')} ‡∏ô.*

## üìä ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
{trend}
**Sentiment Score:** {avg_sentiment:.3f}
**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:** {gold_data['article_count']} ‡∏Ç‡πà‡∏≤‡∏ß
**‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á:** {outlook}

## üì∞ 5 ‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏çÂΩ±Èüø‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥
{chr(10).join(summaries_th)}
"""
    return summary_report

def generate_full_dashboard(articles):
    results = {}
    
    gold_data = analyze_gold_news(articles)
    if gold_data:
        avg_sent = gold_data['sentiment']
        if avg_sent > 0.1:
            tone = "üü© ‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å"
            trend = "Bullish"
        elif avg_sent < -0.1:
            tone = "üü• ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏ö"
            trend = "Bearish"
        else:
            tone = "‚ö™ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
            trend = "Neutral"
        
        results["‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥ (XAU)"] = {
            "sentiment": avg_sent,
            "tone": tone,
            "trend": trend,
            "articles": gold_data['articles'][:3],
            "article_count": gold_data['article_count']
        }
    
    for asset_name, keywords in ASSETS.items():
        if asset_name == "‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥ (XAU)":
            continue
            
        relevant = []
        sentiment_scores = []
        
        for a in articles:
            if any(kw in a['content_lower'] for kw in keywords):
                vs = analyzer.polarity_scores(a["title"] + " " + a["summary_en"])
                sentiment_scores.append(vs["compound"])
                relevant.append(a)
        
        if sentiment_scores:
            avg_sent = sum(sentiment_scores) / len(sentiment_scores)
            if avg_sent > 0.1:
                tone = "üü© ‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å"
                trend = "Bullish"
            elif avg_sent < -0.1:
                tone = "üü• ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏ö"
                trend = "Bearish"
            else:
                tone = "‚ö™ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
                trend = "Neutral"
            
            results[asset_name] = {
                "sentiment": avg_sent,
                "tone": tone,
                "trend": trend,
                "articles": relevant[:3],
                "article_count": len(relevant)
            }
    
    return results

# ---------- STREAMLIT APP ----------
st.set_page_config(page_title="SmartMarket Dashboard Pro", layout="wide", initial_sidebar_state="expanded")

# Initialize background updater
news_updater = NewsUpdater()

# ---------- 9. Customizable Dashboard ‡πÉ‡∏ô Sidebar ----------
st.sidebar.title("üéõÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Dashboard")

app_mode = st.sidebar.radio(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•:",
    ["üèÜ Gold Daily Summary", "üìä Full Market Dashboard", "üîç ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö"]
)

st.sidebar.markdown("---")
st.sidebar.subheader("üé® ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•")

# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏î‡πâ
show_live_prices = st.sidebar.checkbox("‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå", True)
show_technical = st.sidebar.checkbox("‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ", True)
show_alerts = st.sidebar.checkbox("‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", True)
show_strategies = st.sidebar.checkbox("‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î", True)
show_economic = st.sidebar.checkbox("‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à", True)
show_performance = st.sidebar.checkbox("‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û", True)

# Theme selection
theme = st.sidebar.selectbox("‡∏ò‡∏µ‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•", ["Default", "Dark Mode", "Professional"])

# Background updates
auto_update = st.sidebar.checkbox("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", True)
if auto_update:
    news_updater.start_background_update()

st.sidebar.markdown("---")
st.sidebar.info("""
**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
- üèÜ **Gold Summary**: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô
- üìä **Full Dashboard**: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå
- üîç **‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö**: ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô
""")

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
with st.spinner('üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...'):
    articles = get_news()
    live_prices = get_live_prices() if show_live_prices else {}
    important_alerts = check_important_news(articles) if show_alerts else []
    gold_data = analyze_gold_news(articles)
    results = generate_full_dashboard(articles)
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
    technical_data = {}
    if show_technical and results:
        for asset_name in results.keys():
            symbol = SYMBOLS.get(asset_name)
            if symbol:
                technical_data[asset_name] = get_technical_analysis(symbol)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
    trading_strategies = generate_trading_strategies(results, technical_data, live_prices) if show_strategies and results else []
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à
    economic_events = get_economic_calendar() if show_economic else []
    
    # ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    performance_stats = get_performance_stats() if show_performance else None

if not articles:
    st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
    st.stop()

# Header ‡∏´‡∏•‡∏±‡∏Å
st.title("üöÄ SmartMarket Dashboard Pro")
st.write(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {datetime.now(thai_tz).strftime('%d %B %Y, %H:%M')} ‡∏ô.")

# ---------- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ----------

# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
if show_live_prices and live_prices:
    st.subheader("üìà ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå")
    cols = st.columns(len(live_prices))
    for idx, (asset_name, price_data) in enumerate(live_prices.items()):
        with cols[idx]:
            change_color = "green" if price_data['change'] >= 0 else "red"
            st.metric(
                label=asset_name,
                value=f"${price_data['price']:.2f}",
                delta=f"{price_data['change']:.2f}%",
                delta_color="normal"
            )

# ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
if show_alerts and important_alerts:
    st.subheader("üîî ‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á")
    for alert in important_alerts[:3]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        with st.expander(f"{alert['category']}: {alert['title']}", expanded=True):
            st.write(f"**‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:** {alert['title']}")
            st.write(f"**‡∏™‡∏£‡∏∏‡∏õ:** {alert['summary']}")
            st.markdown(f"[‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠...]({alert['link']})")

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
if app_mode == "üèÜ Gold Daily Summary":
    gold_summary = generate_gold_daily_summary(gold_data)
    if gold_summary:
        st.markdown(gold_summary)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥
        if show_technical and "‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥ (XAU)" in technical_data:
            tech = technical_data["‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥ (XAU)"]
            if tech:
                st.subheader("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ - ‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", f"${tech['current_price']:.2f}")
                with col2:
                    st.metric("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°", f"{tech['trend_color']} {tech['trend']}")
                with col3:
                    st.metric("RSI", f"{tech['rsi_color']} {tech['rsi']:.1f}{tech['rsi_signal']}")
    
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")

elif app_mode == "üìä Full Market Dashboard":
    if not results:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")
    else:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏öÂç°Áâá
        st.subheader("üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ï‡∏•‡∏≤‡∏î")
        cols = st.columns(len(results))
        for idx, (asset_name, data) in enumerate(results.items()):
            with cols[idx]:
                st.subheader(f"üîπ {asset_name}")
                st.metric("Sentiment", f"{data['sentiment']:.3f}")
                st.metric("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°", data['trend'])
                st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πà‡∏≤‡∏ß", data['article_count'])
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
        if show_technical:
            st.markdown("---")
            st.subheader("üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ")
            tech_cols = st.columns(len(results))
            for idx, (asset_name, data) in enumerate(results.items()):
                with tech_cols[idx]:
                    tech = technical_data.get(asset_name)
                    if tech:
                        st.write(f"**{asset_name}**")
                        st.write(f"‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°: {tech['trend_color']} {tech['trend']}")
                        st.write(f"RSI: {tech['rsi']:.1f}{tech['rsi_signal']}")
                        st.write(f"MA20: ${tech['ma20']:.2f}")
                        st.write(f"MA50: ${tech['ma50']:.2f}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        if show_strategies and trading_strategies:
            st.markdown("---")
            st.subheader("üéØ ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
            for strategy in trading_strategies:
                with st.expander(f"{strategy['asset']}: {strategy['action']}", expanded=True):
                    st.write(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠:** {strategy['confidence']}")
                    st.write(f"**‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:** {strategy['reason']}")
                    st.write(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á:** {strategy['risk']}")
                    st.write(f"**‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:** {strategy['timeframe']}")
                    st.write(f"**Target ‡∏Å‡∏≥‡πÑ‡∏£:** {strategy['target']}")
                    st.write(f"**Stop Loss:** {strategy['stoploss']}")
        
        st.markdown("---")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πà‡∏≤‡∏ß
        st.subheader("üì∞ ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        for asset_name, data in results.items():
            st.write(f"**{asset_name}**")
            for art in data["articles"]:
                with st.container():
                    st.markdown(f"**[{art['title']}]({art['link']})**")
                    summary_th = translate_text(art["summary_en"])
                    st.write(f"‚Üí {summary_th}")
                st.markdown("---")

elif app_mode == "üîç ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö":
    st.subheader("üÜö ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÇ‡∏´‡∏°‡∏î")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üèÜ Gold Summary")
        gold_summary = generate_gold_daily_summary(gold_data)
        if gold_summary:
            st.markdown(gold_summary)
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    
    with col2:
        st.markdown("### üìä Full Dashboard - ‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥")
        if gold_data:
            st.metric("Sentiment", f"{gold_data['sentiment']:.3f}")
            st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πà‡∏≤‡∏ß", gold_data['article_count'])
            st.info(f"‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î {len(gold_data['articles'][:3])} ‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {gold_data['article_count']} ‡∏Ç‡πà‡∏≤‡∏ß")
            
            for i, art in enumerate(gold_data['articles'][:3], 1):
                st.markdown(f"{i}. **{art['title']}**")

# ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à
if show_economic and economic_events:
    st.markdown("---")
    st.subheader("üìÖ ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç")
    for event in economic_events:
        col1, col2, col3, col4 = st.columns([2,1,1,2])
        with col1:
            st.write(f"**{event['event']}**")
        with col2:
            st.write(f"üìÖ {event['date']}")
        with col3:
            st.write(f"‚è∞ {event['time']}")
        with col4:
            st.write(f"‚ö° {event['impact']} - {event['effect_on_gold']}")

# ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
if show_performance and performance_stats:
    st.markdown("---")
    st.subheader("üìä ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á")
    
    for stat in performance_stats:
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.write(f"**{stat['asset']}**")
        with col2:
            st.write(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: {stat['accuracy']:.1f}%")
        with col3:
            st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô: {stat['total_days']}")
        with col4:
            st.write(f"Sentiment ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {stat['avg_sentiment']:.3f}")

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
if results:
    save_daily_analysis(results)

# Footer
st.markdown("---")
st.info("""
**‚úÖ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏≤:**
- üìà ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡∏à‡∏≤‡∏Å Yahoo Finance
- üîî ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ (MA, RSI)
- üíæ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡πÉ‡∏ô Database
- üéØ ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î
- üìÖ ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
- üìà Dashboard ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
- üé® Customizable Dashboard
- üîÑ Background Updates
""")

# ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
st.markdown("---")
st.subheader("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")

col1, col2 = st.columns(2)
with col1:
    if st.button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Gold Summary"):
        gold_summary = generate_gold_daily_summary(gold_data)
        if gold_summary:
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î",
                data=gold_summary,
                file_name=f"gold_summary_{datetime.now(thai_tz).strftime('%Y%m%d')}.txt",
                mime="text/plain"
            )

with col2:
    if st.button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Full Report"):
        full_report = "SmartMarket Dashboard Pro Report\n"
        full_report += f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {datetime.now(thai_tz).strftime('%d/%m/%Y %H:%M')}\n\n"
        
        if results:
            for asset_name, data in results.items():
                full_report += f"{asset_name}: {data['trend']} (Sentiment: {data['sentiment']:.3f})\n"
        
        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î",
            data=full_report,
            file_name=f"full_report_{datetime.now(thai_tz).strftime('%Y%m%d')}.txt",
            mime="text/plain"
        )

st.caption("üß† SmartMarket Dashboard Pro - ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô")
